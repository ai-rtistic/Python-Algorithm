# 어떠한 수 N 이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하여고 한다. 단, 두번째 연산은 N 이 K 로 나누어 떨어질 때만 선택할 수 있다.

# 1. N 에서 1을 뺀다.
# 2. N 을 K 로 나눈다.

# 예를 들어, N이 17, K가 4 라고 가정한다. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의 과정을 두 번 수행 하면 N은 1이 된다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 된다. 이는 N을 1로 만드는 최소 횟수이다.

# N, K 가 주어질 때 N 이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하라.

# -----------------------------------------------------------------------------------
# 입력 조건
# 첫째 줄에 N (1<=N<=100,000)과 K(2<=K<=100,000)가 공백을 기준으로 하여 각각 자연수로 주어짐

# 출력 조건
# 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력

# 입력 예시 
# 25 5
# 출력 예시 
# 2
#---------------------------------------------------------------------------------------

n, k = map(int, input().split())
count = 0

while True:
    # N 이 K로 나누어 떨어지는 수가 될 때까지 빼기
    target = (n//k)*k
    count += (n-target)
    n = target
    

    # N 이 K 보다 작을 때 (더 이상 나눌 수 없을 때) 반복문 탈출
    if n<k:
        break

    # K 로 나누기
    n //= k
    count += 1
    

count += (n-1)
print(count)


#-----------------------------------------------------------------------------------------